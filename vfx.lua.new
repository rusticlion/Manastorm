-- VFX.lua
-- Visual effects module for spell animations and combat effects

local VFX = {}
VFX.__index = VFX

-- Import pool module
local Pool = require("core.Pool")
local Constants = require("core.Constants")

-- Table to store active effects
VFX.activeEffects = {}

-- Helper function to lazily load assets on demand
local function getAssetInternal(assetId)
    -- Check if asset path exists
    local path = VFX.assetPaths[assetId]
    if not path then 
        print("[VFX] Warning: No path defined for asset: " .. tostring(assetId))
        return nil 
    end
    
    -- Initialize assets table if it doesn't exist
    VFX.assets = VFX.assets or {}
    
    -- Check if already loaded (simple cache within VFX module)
    if VFX.assets[assetId] then 
        return VFX.assets[assetId] 
    end
    
    -- Special handling for runes array
    if assetId == "runes" then
        -- Check if runes are already loaded
        if VFX.assets.runes and #VFX.assets.runes > 0 then
            return VFX.assets.runes
        end
        
        -- Initialize runes array if needed
        VFX.assets.runes = VFX.assets.runes or {}
        
        -- If array exists but is empty, load runes
        if #VFX.assets.runes == 0 then
            local AssetCache = require("core.AssetCache")
            for i, runePath in ipairs(path) do
                print("[VFX] Loading rune asset on demand: rune" .. i)
                local runeImg = AssetCache.getImage(runePath)
                if runeImg then
                    table.insert(VFX.assets.runes, runeImg)
                else
                    print("[VFX] Warning: Failed to load rune asset: " .. runePath)
                end
            end
        end
        
        -- Log if runes were loaded successfully
        if #VFX.assets.runes > 0 then
            print("[VFX] Successfully loaded " .. #VFX.assets.runes .. " rune assets")
        else 
            print("[VFX] Warning: No rune assets were loaded!")
        end
        
        return VFX.assets.runes
    end
    
    -- Load on demand using AssetCache
    print("[VFX] Lazily loading asset: " .. assetId)
    local AssetCache = require("core.AssetCache")
    VFX.assets[assetId] = AssetCache.getImage(path)
    return VFX.assets[assetId]
end

-- Initialize the VFX system
function VFX.init()
    -- Define asset paths (but don't load them yet - lazy loading)
    VFX.assetPaths = {
        -- Fire effects
        fireParticle = "assets/sprites/fire-particle.png",
        fireGlow = "assets/sprites/fire-glow.png",
        
        -- Force effects
        forceWave = "assets/sprites/force-wave.png",
        
        -- Moon effects
        moonGlow = "assets/sprites/moon-glow.png",
        
        -- Generic effects
        sparkle = "assets/sprites/sparkle.png",
        impactRing = "assets/sprites/impact-ring.png",

        -- Rune assets for Ward shields (paths only)
        runes = {}
    }
    
    -- Define rune paths
    for i = 1, 9 do
        table.insert(VFX.assetPaths.runes, string.format("assets/sprites/runes/rune%d.png", i))
    end
    
    -- Initialize empty assets table (will be filled on demand)
    VFX.assets = {}
    
    -- Public function to get assets - expose the internal getAsset function
    VFX.getAsset = getAssetInternal
    
    -- Initialize particle pools
    Pool.create("vfx_particle", 100, function() return {} end, VFX.resetParticle)
    
    -- Preload critical assets immediately
    -- This ensures essential effects like ward shields work even on first use
    print("[VFX] Eagerly preloading critical assets...")
    
    -- Preload rune assets for ward shields
    VFX.assets.runes = {}
    local AssetCache = require("core.AssetCache")
    for i, runePath in ipairs(VFX.assetPaths.runes) do
        print("[VFX] Preloading essential asset: rune" .. i)
        local runeImg = AssetCache.getImage(runePath)
        if runeImg then
            table.insert(VFX.assets.runes, runeImg)
        else
            print("[VFX] Warning: Failed to preload rune asset: " .. runePath)
        end
    end
    
    -- Preload sparkle asset (used in many effects)
    print("[VFX] Preloading essential asset: sparkle")
    VFX.assets.sparkle = AssetCache.getImage(VFX.assetPaths.sparkle)
    
    -- Effect definitions keyed by effect name
    VFX.effects = {
        -- Base templates for the rules-driven VFX system
        proj_base = {
            type = "projectile",
            duration = 1.0,
            particleCount = 20,
            startScale = 0.5,
            endScale = 0.8,
            color = Constants.Color.SMOKE,  -- Default color, will be overridden
            trailLength = 12,
            impactSize = 1.2,
            sound = nil  -- No default sound
        },
        
        beam_base = {
            type = "beam",
            duration = 1.2,
            particleCount = 25,
            beamWidth = 30,
            startScale = 0.3,
            endScale = 0.9,
            color = Constants.Color.SMOKE,  -- Default color, will be overridden
            pulseRate = 3,
            sound = nil
        },
        
        zone_base = {
            type = "aura",
            duration = 1.0,
            particleCount = 30,
            startScale = 0.4,
            endScale = 1.0,
            color = Constants.Color.SMOKE,  -- Default color, will be overridden
            radius = 80,
            pulseRate = 3,
            sound = nil
        },
        
        util_base = {
            type = "aura",
            duration = 0.8,
            particleCount = 15,
            startScale = 0.3,
            endScale = 0.7,
            color = Constants.Color.SMOKE,  -- Default color, will be overridden
            radius = 60,
            pulseRate = 4,
            sound = nil
        },
        
        impact_base = {
            type = "impact",
            duration = 0.5,
            particleCount = 20,
            startScale = 0.6,
            endScale = 0.3,
            color = Constants.Color.SMOKE,  -- Default color, will be overridden
            radius = 40,
            sound = nil
        },
        
        shield_hit_base = {
            type = "impact",
            duration = 0.7,
            particleCount = 25,
            startScale = 0.5,
            endScale = 1.1,
            color = Constants.Color.SMOKE,  -- Default color, will be overridden
            radius = 60,
            sound = nil
        },
        
        -- Existing effects
        -- General impact effect (used for many spell interactions)
        impact = {
            type = "impact",
            duration = 0.5,  -- Half second by default
            particleCount = 15,
            startScale = 0.8,
            endScale = 0.2,
            color = Constants.Color.SMOKE,  -- Default white -> SMOKE
            radius = 30,
            sound = nil  -- No default sound
        },
        
        -- Tidal Force Ground effect - for forcing opponents down from AERIAL to GROUNDED
        tidal_force_ground = {
            type = "impact",
            duration = 0.8,
            particleCount = 25,
            startScale = 0.5,
            endScale = 1.2,
            color = Constants.Color.OCEAN,  -- Blue-ish for water/tidal theme
            radius = 80,
            sound = "tidal_wave"
        },
        
        -- Gravity Pin Ground effect - for forcing opponents down from AERIAL to GROUNDED
        gravity_pin_ground = {
            type = "impact",
            duration = 0.8,
            particleCount = 20,
            startScale = 0.6,
            endScale = 1.0,
            color = Constants.Color.MAROON,  -- Purple for gravity theme -> MAROON
            radius = 70,
            sound = "gravity_slam"
        },
        
        -- Gravity Trap Set effect - when placing a gravity trap
        gravity_trap_set = {
            type = "impact",
            duration = 1.2,
            particleCount = 30,
            startScale = 0.4,
            endScale = 1.2,
            color = Constants.Color.MAROON,  -- Purple for gravity theme
            radius = 75,
            sound = "gravity_trap_deploy"  -- Sound will need to be loaded
        },
        
        force_blast = {
            type = "impact",
            duration = 1.0,
            particleCount = 30,
            startScale = 0.4,
            endScale = 1.5,
            color = Constants.Color.YELLOW,  -- Blue-ish for force theme -> YELLOW
            radius = 90,
            sound = "force_wind"
        },
        
        -- Free Mana - special effect when freeing all spells
        free_mana = {
            type = "aura",
            duration = 1.2,
            particleCount = 40,
            startScale = 0.4,
            endScale = 0.8,
            color = Constants.Color.SKY,  -- Bright blue for freeing mana -> SKY
            radius = 100,
            pulseRate = 4,
            sound = "release"
        },

        -- Firebolt effect
        firebolt = {
            type = "projectile",
            duration = 1.0,  -- 1 second total duration
            particleCount = 20,
            startScale = 0.5,
            endScale = 1.0,
            color = Constants.Color.ORANGE, -- {1, 0.5, 0.2, 1}
            trailLength = 12,
            impactSize = 1.4,
            sound = "firebolt"
        },
        
        -- Meteor effect
        meteor = {
            type = "impact",
            duration = 1.5,
            particleCount = 40,
            startScale = 2.0,
            endScale = 0.5,
            color = Constants.Color.OCHRE, -- {1, 0.4, 0.1, 1}
            radius = 120,
            sound = "meteor"
        },
        
        -- Mist Veil effect
        mistveil = {
            type = "aura",
            duration = 3.0,
            particleCount = 30,
            startScale = 0.2,
            endScale = 0.8,
            color = Constants.Color.SKY, -- {0.7, 0.7, 1.0, 0.7}
            radius = 80,
            pulseRate = 2,
            sound = "mist",
            criticalAssets = {"sparkle", "runes"} -- Define assets critical for this effect
        },
        
        -- Emberlift effect
        emberlift = {
            type = "vertical",
            duration = 1.2,
            particleCount = 25,
            startScale = 0.3,
            endScale = 0.1,
            color = Constants.Color.ORANGE, -- {1, 0.6, 0.2, 0.8}
            height = 100,
            sound = "whoosh"
        },
        
        -- Force Blast Up effect (for forcing opponents up to AERIAL)
        force_blast_up = {
            type = "vertical",
            duration = 1.5,
            particleCount = 35,
            startScale = 0.4,
            endScale = 0.2,
            color = Constants.Color.YELLOW,  -- Blue-ish for force -> YELLOW
            height = 120,
            sound = "force_wind"
        },
        
        -- Full Moon Beam effect
        fullmoonbeam = {
            type = "beam",
            duration = 1.8,
            particleCount = 30,
            beamWidth = 40,
            startScale = 0.2,
            endScale = 1.0,
            color = Constants.Color.PINK,
            pulseRate = 3,
            sound = "moonbeam"
        },
        
        -- Tidal Force effect
        tidal_force = {
            type = "projectile",
            duration = 1.2,
            particleCount = 30,
            startScale = 0.4,
            endScale = 0.8,
            color = Constants.Color.OCEAN, -- {0.3, 0.5, 1.0, 0.8} -> Blue-ish for water theme
            trailLength = 15,
            impactSize = 1.6,
            sound = "tidal_wave"
        },
        
        -- Lunar Disjunction effect
        lunardisjunction = {
            type = "projectile",
            duration = 1.0,
            particleCount = 25,
            startScale = 0.3,
            endScale = 0.6,
            color = Constants.Color.PINK, -- {0.8, 0.6, 1.0, 0.9} -> Purple-blue for moon/cosmic theme -> PINK
            trailLength = 10,
            impactSize = 1.8,  -- Bigger impact
            sound = "lunar_disrupt"
        },
        
        -- Disjoint effect (for cancelling opponent's spell)
        disjoint_cancel = {
            type = "impact",
            duration = 1.2,
            particleCount = 35,
            startScale = 0.6,
            endScale = 1.0,
            color = Constants.Color.PINK, -- {0.9, 0.5, 1.0, 0.9} -> Brighter purple for disruption -> PINK
            radius = 70,
            sound = "lunar_disrupt"
        },
        
        -- Conjure Fire effect
        conjurefire = {
            type = "conjure",
            duration = 1.5,
            particleCount = 20,
            startScale = 0.3,
            endScale = 0.8,
            color = Constants.Color.ORANGE, -- {1.0, 0.5, 0.2, 0.9}
            height = 140,  -- Height to rise toward mana pool
            spreadRadius = 40, -- Initial spread around the caster
            sound = "conjure"
        },
        
        -- Conjure Moonlight effect
        conjuremoonlight = {
            type = "conjure",
            duration = 1.5,
            particleCount = 20,
            startScale = 0.3,
            endScale = 0.8,
            color = Constants.Color.SKY, -- {0.7, 0.7, 1.0, 0.9}
            height = 140,
            spreadRadius = 40,
            sound = "conjure"
        },
        
        -- Conjure Force effect
        force_conjure = {
            type = "conjure",
            duration = 1.5,
            particleCount = 20,
            startScale = 0.3,
            endScale = 0.8,
            color = Constants.Color.YELLOW, -- {0.3, 0.5, 1.0, 0.9} -> Blue-ish -> YELLOW
            height = 140,
            spreadRadius = 40,
            sound = "conjure"
        },

        -- Conjure Star effect
        star_conjure = {
            type = "conjure",
            duration = 1.5,
            particleCount = 20,
            startScale = 0.3,
            endScale = 0.8,
            color = Constants.Color.BONE, -- {0.9, 0.9, 0.2, 0.9} -> Yellow-ish -> BONE
            height = 140,
            spreadRadius = 40,
            sound = "conjure"
        },
        
        -- Volatile Conjuring effect (random mana)
        volatileconjuring = {
            type = "conjure",
            duration = 1.2,
            particleCount = 25,
            startScale = 0.2,
            endScale = 0.6,
            color = Constants.Color.YELLOW,  -- Yellow base color, will be randomized
            height = 140,
            spreadRadius = 55,  -- Wider spread for volatile
            sound = "conjure"
        },
        
        -- Nova Conjuring effect (Fire, Force, Star)
        nova_conjure = {
            type = "conjure",
            duration = 2.0, -- Slightly longer duration
            particleCount = 30, -- More particles
            startScale = 0.4,
            endScale = 1.0,
            color = Constants.Color.ORANGE, -- Mixed color base (orange/gold) -> ORANGE
            height = 140,
            spreadRadius = 60, -- Wider spread
            sound = "conjure_nova" -- Assumed sound effect
        },

        -- Witch Conjuring effect (Moon, Force, Nature)
        witch_conjure = {
            type = "conjure",
            duration = 2.0, -- Slightly longer duration
            particleCount = 30, -- More particles
            startScale = 0.4,
            endScale = 1.0,
            color = Constants.Color.MAROON, -- Mixed color base (purple/indigo) -> MAROON
            height = 140,
            spreadRadius = 60, -- Wider spread
            sound = "conjure_witch" -- Assumed sound effect
        },
        
        -- Shield effect (used for barrier, ward, and field shield activation)
        shield = {
            type = "aura",
            duration = 1.0,
            particleCount = 25,
            startScale = 0.5,
            endScale = 1.2,
            color = Constants.Color.SKY,  -- Default blue-ish -> SKY
            radius = 60,
            pulseRate = 3,
            sound = "shield",
            criticalAssets = {"sparkle", "runes", "impactRing"}, -- Assets needed for shields
            shieldType = nil -- Will be set at runtime based on the spell
        },
        
        -- Gravity Trap Set effect is already defined above,

        -- Additional effects for VFXType constants
        
        -- Movement and positioning effects
        elevation_up = {
            type = "vertical",
            duration = 1.0,
            particleCount = 20,
            startScale = 0.3,
            endScale = 0.1,
            color = Constants.Color.SKY,
            height = 80,
            sound = "whoosh"
        },
        
        elevation_down = {
            type = "impact",
            duration = 0.8,
            particleCount = 20,
            startScale = 0.6,
            endScale = 1.0,
            color = Constants.Color.SMOKE,
            radius = 60,
            sound = "thud"
        },
        
        range_change = {
            type = "impact",
            duration = 0.8,
            particleCount = 15,
            startScale = 0.4,
            endScale = 0.8,
            color = Constants.Color.YELLOW,
            radius = 40,
            sound = nil
        },
        
        force_position = {
            type = "impact",
            duration = 0.8,
            particleCount = 25,
            startScale = 0.5,
            endScale = 1.2,
            color = Constants.Color.OCEAN,
            radius = 50,
            sound = "force_wind"
        },
        
        -- Resource effects
        token_lock = {
            type = "aura",
            duration = 0.8,
            particleCount = 15,
            startScale = 0.2,
            endScale = 0.5,
            color = Constants.Color.MAROON,
            radius = 20,
            pulseRate = 4,
            sound = "lock"
        },
        
        token_shift = {
            type = "aura",
            duration = 0.6,
            particleCount = 12,
            startScale = 0.2,
            endScale = 0.4,
            color = Constants.Color.PINK,
            radius = 20,
            pulseRate = 5,
            sound = "shift"
        },
        
        token_consume = {
            type = "impact",
            duration = 0.7,
            particleCount = 18,
            startScale = 0.4,
            endScale = 0.1,
            color = Constants.Color.CRIMSON,
            radius = 25,
            sound = "consume"
        },
        
        -- Defense effects
        reflect = {
            type = "aura",
            duration = 1.2,
            particleCount = 20,
            startScale = 0.4,
            endScale = 0.8,
            color = Constants.Color.YELLOW,
            radius = 50,
            pulseRate = 4,
            sound = "reflect"
        },
        
        -- Spell timing effects
        spell_accelerate = {
            type = "aura",
            duration = 0.8,
            particleCount = 15,
            startScale = 0.2,
            endScale = 0.5,
            color = Constants.Color.LIME,
            radius = 30,
            pulseRate = 5,
            sound = "accelerate"
        },
        
        spell_cancel = {
            type = "impact",
            duration = 0.7,
            particleCount = 20,
            startScale = 0.5,
            endScale = 0.2,
            color = Constants.Color.CRIMSON,
            radius = 40,
            sound = "cancel"
        },
        
        spell_freeze = {
            type = "aura",
            duration = 1.0,
            particleCount = 18,
            startScale = 0.3,
            endScale = 0.6,
            color = Constants.Color.OCEAN,
            radius = 35,
            pulseRate = 3,
            sound = "freeze"
        },
        
        spell_echo = {
            type = "aura",
            duration = 1.0,
            particleCount = 15,
            startScale = 0.3,
            endScale = 0.7,
            color = Constants.Color.BONE,
            radius = 40,
            pulseRate = 4,
            sound = "echo"
        }
    }
    
    -- Initialize sound effects
    VFX.sounds = {
        firebolt = nil, -- Sound files will be loaded when available
        meteor = nil,
        mist = nil,
        whoosh = nil,
        moonbeam = nil,
        conjure = nil,
        shield = nil
    }
    
    -- Preload sound effects when they become available
    -- Example of how to load sounds with AssetCache:
    -- VFX.sounds.firebolt = AssetCache.getSound("assets/sounds/firebolt.wav")
    
    -- Create effect pool - each effect is a container object
    Pool.create("vfx_effect", 10, function() return { particles = {} } end, VFX.resetEffect)
    
    -- Return the VFX table itself
    return VFX
end

-- Reset function for particle objects
function VFX.resetParticle(particle)
    -- Clear all fields
    for k, _ in pairs(particle) do
        particle[k] = nil
    end
    return particle
end

-- Reset function for effect objects
function VFX.resetEffect(effect)
    -- Release all particles back to their pool
    for _, particle in ipairs(effect.particles) do
        Pool.release("vfx_particle", particle)
    end
    
    -- Clear all fields except particles
    effect.name = nil
    effect.type = nil
    effect.sourceX = nil
    effect.sourceY = nil
    effect.targetX = nil
    effect.targetY = nil
    effect.duration = nil
    effect.timer = nil
    effect.progress = nil
    effect.isComplete = nil
    effect.particleCount = nil
    effect.startScale = nil
    effect.endScale = nil
    effect.color = nil
    effect.trailPoints = nil
    effect.sound = nil
    effect.radius = nil
    effect.beamWidth = nil
    effect.height = nil
    effect.pulseRate = nil
    effect.trailLength = nil
    effect.impactSize = nil
    effect.spreadRadius = nil
    effect.options = nil
    effect.beamProgress = nil
    effect.beamLength = nil
    effect.beamAngle = nil
    effect.impactCreated = nil
    effect.manaPoolX = nil
    effect.manaPoolY = nil
    effect.sourceGlow = nil
    effect.poolGlow = nil
    effect.motion = nil
    effect.rangeBand = nil
    effect.elevation = nil
    effect.addons = nil
    
    -- Reset particles array but don't delete it
    effect.particles = {}
    
    return effect
end

-- Create a new effect instance
function VFX.createEffect(effectName, sourceX, sourceY, targetX, targetY, options)
    local Constants = require("core.Constants")
    
    -- Handle both string and Constants.VFXType format
    local effectNameStr
    
    -- Validate and normalize effectName 
    if type(effectName) ~= "string" then
        print("Error in VFX.createEffect: Effect name must be a string or Constants.VFXType value, got: " .. tostring(effectName))
        -- Fall back to a default effect
        effectNameStr = Constants.VFXType.IMPACT
    else
        effectNameStr = effectName
    end
    
    -- Debug output
    print("[VFX] Creating effect: " .. effectNameStr)
    print("[VFX] sourceX: " .. sourceX .. " sourceY: " .. sourceY)
    print("[VFX] targetX: " .. targetX .. " targetY: " .. targetY)
    
    -- Process options
    local opts = options or {}
    
    -- Try to get the effect template first to check for critical assets
    local template = VFX.effects[effectNameStr:lower()]
    if template then
        -- Check if the effect template defines critical assets
        if template.criticalAssets then
            for _, assetId in ipairs(template.criticalAssets) do
                -- Ensure the critical asset is loaded
                local asset = VFX.getAsset(assetId)
                if not asset or (type(asset) == "table" and #asset == 0) then
                    print("[VFX] Warning: Critical asset " .. assetId .. " not available for effect " .. effectNameStr)
                    
                    -- Emergency loading of critical asset
                    if assetId == "runes" and VFX.assetPaths and VFX.assetPaths.runes then
                        print("[VFX] Emergency loading of rune assets")
                        local AssetCache = require("core.AssetCache")
                        VFX.assets.runes = VFX.assets.runes or {}
                        for i, runePath in ipairs(VFX.assetPaths.runes) do
                            local runeImg = AssetCache.getImage(runePath)
                            if runeImg then
                                table.insert(VFX.assets.runes, runeImg)
                            end
                        end
                    elseif VFX.assetPaths and VFX.assetPaths[assetId] then
                        print("[VFX] Emergency loading of asset: " .. assetId)
                        local AssetCache = require("core.AssetCache")
                        VFX.assets[assetId] = AssetCache.getImage(VFX.assetPaths[assetId])
                    end
                end
            end
        end
    else
        -- Backward compatibility for effects without templates that may need runes
        -- (e.g., mistveil, effects with "ward" in the name)
        if effectNameStr:lower():find("ward") or effectNameStr:lower() == "mistveil" then
            -- Ensure runes are loaded for ward-related effects
            local runeAssets = VFX.getAsset("runes")
            if not runeAssets or #runeAssets == 0 then
                print("[VFX] Warning: Ward effect requested but rune assets not available.")
                -- Force-load runes
                if VFX.assetPaths and VFX.assetPaths.runes then
                    local AssetCache = require("core.AssetCache")
                    VFX.assets.runes = {}
                    for i, runePath in ipairs(VFX.assetPaths.runes) do
                        print("[VFX] Emergency loading of rune asset: " .. i)
                        local runeImg = AssetCache.getImage(runePath)
                        if runeImg then
                            table.insert(VFX.assets.runes, runeImg)
                        end
                    end
                end
            end
        end
    end
    
    -- Get or reuse effect template - use :lower() safely now that we've verified it's a string
    if not template then -- Only if we didn't already get it above
        template = VFX.effects[effectNameStr:lower()]
        if not template then
            print("Warning: Effect not found: " .. effectNameStr)
            -- Fall back to impact effect if available
            template = VFX.effects[Constants.VFXType.IMPACT_BASE]
            if not template then
                return nil -- Give up if no fallback is available
            end
            print("[VFX] Falling back to '" .. Constants.VFXType.IMPACT_BASE .. "' effect")
        end
    end
    
    -- Create a new effect instance from pool
    local effect = Pool.acquire("vfx_effect")
    effect.name = effectName
    effect.type = template.type
    effect.sourceX = sourceX
    effect.sourceY = sourceY
    effect.targetX = targetX or sourceX
    effect.targetY = targetY or sourceY
    
    -- Timing
    effect.duration = opts.duration or template.duration
    effect.timer = 0
    effect.progress = 0
    effect.isComplete = false
    
    -- Visual properties (copied from template, with options overrides)
    local scale = opts.scale or 1.0
    effect.particleCount = math.floor(template.particleCount * scale)
    effect.startScale = template.startScale * scale
    effect.endScale = template.endScale * scale
    
    -- Use color from options or template
    if opts.color then
        effect.color = {opts.color[1], opts.color[2], opts.color[3], opts.color[4]}
    else
        effect.color = {template.color[1], template.color[2], template.color[3], template.color[4]}
    end
    
    -- Store motion style, range band, and elevation for trajectory calculations
    effect.motion = opts.motion or Constants.MotionStyle.RADIAL
    effect.rangeBand = opts.rangeBand
    effect.elevation = opts.elevation
    
    -- Effect specific properties
    effect.particles = {}
    effect.trailPoints = {}
    
    -- Sound
    effect.sound = template.sound
    
    -- Additional properties based on effect type
    effect.radius = template.radius and (template.radius * scale)
    effect.beamWidth = template.beamWidth and (template.beamWidth * scale)
    effect.height = template.height and (template.height * scale)
    effect.pulseRate = template.pulseRate
    effect.trailLength = template.trailLength and (template.trailLength * scale)
    effect.impactSize = template.impactSize and (template.impactSize * scale)
    effect.spreadRadius = template.spreadRadius and (template.spreadRadius * scale)
    
    -- Store addons list (will be processed in a later ticket)
    effect.addons = opts.addons
    if effect.addons and #effect.addons > 0 then
        for _, addon in ipairs(effect.addons) do
            print("TODO addon: " .. addon)
        end
    end
    
    -- Store the original options
    effect.options = opts
    
    -- Initialize particles based on effect type
    VFX.initializeParticles(effect)
    
    -- Play sound effect if available
    if effect.sound and VFX.sounds[effect.sound] then
        -- Will play sound when implemented
    end
    
    -- Add to active effects list
    table.insert(VFX.activeEffects, effect)
    
    return effect
end